package woop;

import java.util.Random;

public class BiosphereCaveGen
  extends MapGenBase
{
  BiosphereGen generator;
  
  public BiosphereCaveGen()
  {
    this.generator = null;
  }
  
  public void a(adn ichunkprovider, abv world, int i, int j, byte[] abyte0)
  {
    if ((this.generator == null) && ((ichunkprovider instanceof BiosphereGen))) {
      this.generator = ((BiosphereGen)ichunkprovider);
    }
    super.a(ichunkprovider, world, i, j, abyte0);
  }
  
  protected void a(int i, int j, byte[] abyte0, double d, double d1, double d2)
  {
    a(i, j, abyte0, d, d1, d2, 10.0F + this.b.nextFloat() * 20.0F, 0.0F, 0.0F, -1, -1, 0.5D);
  }
  
  protected void a(int i, int j, byte[] abyte0, double d, double d1, double d2, float f, float f1, float f2, int k, int l, double d3)
  {
    if (this.generator != null) {
      this.generator.setNoise(i, j);
    }
    double d4 = i * 16 + 8;
    double d5 = j * 16 + 8;
    float f3 = 0.0F;
    float f4 = 0.0F;
    Random random = new Random(this.b.nextLong());
    if (l <= 0)
    {
      int i1 = this.a * 16 - 16;
      l = i1 - random.nextInt(i1 / 4);
    }
    boolean flag = false;
    if (k == -1)
    {
      k = l / 2;
      flag = true;
    }
    int j1 = random.nextInt(l / 2) + l / 4;
    boolean flag1 = random.nextInt(6) == 0;
    for (; k < l; k++)
    {
      double d6 = 1.5D + lr.a(k * 3.141593F / l) * f * 1.0F;
      double d7 = d6 * d3;
      float f5 = lr.b(f2);
      float f6 = lr.a(f2);
      d += lr.b(f1) * f5;
      d1 += f6;
      d2 += lr.a(f1) * f5;
      if (flag1) {
        f2 *= 0.92F;
      } else {
        f2 *= 0.7F;
      }
      f2 += f4 * 0.1F;
      f1 += f3 * 0.1F;
      f4 *= 0.9F;
      f3 *= 0.75F;
      f4 += (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 2.0F;
      f3 += (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 4.0F;
      if ((!flag) && (k == j1) && (f > 1.0F))
      {
        a(i, j, abyte0, d, d1, d2, random.nextFloat() * 0.5F + 0.5F, f1 - 1.570796F, f2 / 3.0F, k, l, 1.0D);
        a(i, j, abyte0, d, d1, d2, random.nextFloat() * 0.5F + 0.5F, f1 + 1.570796F, f2 / 3.0F, k, l, 1.0D);
        return;
      }
      if ((flag) || (random.nextInt(4) != 0))
      {
        double d8 = d - d4;
        double d9 = d2 - d5;
        double d10 = l - k;
        double d11 = f + 2.0F + 16.0F;
        if (d8 * d8 + d9 * d9 - d10 * d10 > d11 * d11) {
          return;
        }
        if ((d >= d4 - 16.0D - d6 * 2.0D) && (d2 >= d5 - 16.0D - d6 * 2.0D) && (d <= d4 + 16.0D + d6 * 2.0D) && (d2 <= d5 + 16.0D + d6 * 2.0D))
        {
          int k1 = lr.b(d - d6) - i * 16 - 1;
          int l1 = lr.b(d + d6) - i * 16 + 1;
          int i2 = lr.b(d1 - d7) - 1;
          int j2 = lr.b(d1 + d7) + 1;
          int k2 = lr.b(d2 - d6) - j * 16 - 1;
          int l2 = lr.b(d2 + d6) - j * 16 + 1;
          if (k1 < 0) {
            k1 = 0;
          }
          if (l1 > 16) {
            l1 = 16;
          }
          if (i2 < 1) {
            i2 = 1;
          }
          if (j2 > 120) {
            j2 = 120;
          }
          if (k2 < 0) {
            k2 = 0;
          }
          if (l2 > 16) {
            l2 = 16;
          }
          boolean flag2 = false;
          for (int k3 = k1; (!flag2) && (k3 < l1); k3++) {
            for (int i4 = k2; (!flag2) && (i4 < l2); i4++) {
              for (int j4 = j2 + 1; (!flag2) && (j4 >= i2 - 1); j4--)
              {
                int i3 = (k3 * 16 + i4) * 128 + j4;
                if ((j4 >= 0) && (j4 < 128))
                {
                  if ((abyte0[i3] == aqw.F.cF) || (abyte0[i3] == aqw.G.cF) || (abyte0[i3] == aqw.H.cF) || (abyte0[i3] == aqw.I.cF)) {
                    flag2 = true;
                  }
                  if ((j4 != i2 - 1) && (k3 != k1) && (k3 != l1 - 1) && (i4 != k2) && (i4 != l2 - 1)) {
                    j4 = i2;
                  }
                }
              }
            }
          }
          if (!flag2)
          {
            for (int l3 = k1; l3 < l1; l3++)
            {
              double d12 = (l3 + i * 16 + 0.5D - d) / d6;
              for (int j3 = k2; j3 < l2; j3++)
              {
                this.generator.midY = this.generator.getSurfaceLevel(l3, j3);
                double d13 = (j3 + j * 16 + 0.5D - d2) / d6;
                int k4 = (l3 * 16 + j3) * 128 + j2;
                for (int l4 = j2 - 1; l4 >= i2; l4--)
                {
                  double d14 = (l4 + 0.5D - d1) / d7;
                  if ((d14 > -0.7D) && (d12 * d12 + d14 * d14 + d13 * d13 < 1.0D))
                  {
                    int byte0 = abyte0[k4] & 0xFF;
                    if ((byte0 == aqw.y.cF) || (byte0 == aqw.J.cF) || (byte0 == aqw.K.cF) || (byte0 == aqw.aB.cF) || (byte0 == aqw.S.cF) || (byte0 == aqw.bW.cF)) {
                      if (l4 < BiosphereGen.LAVA_LEVEL)
                      {
                        if (this.generator != null)
                        {
                          double d15 = this.generator.getMainDistance((int)Math.round(d4 + l3 - 8.0D), l4 - 1, (int)Math.round(d5 + j3 - 8.0D));
                          if ((d15 >= this.generator.sphereRadius) && (d15 < this.generator.sphereRadius + 5.0D)) {
                            abyte0[k4] = ((byte)aqw.au.cF);
                          } else if (d15 < this.generator.sphereRadius) {
                            abyte0[k4] = ((byte)aqw.H.cF);
                          }
                        }
                        else
                        {
                          abyte0[k4] = ((byte)aqw.H.cF);
                        }
                      }
                      else if ((l4 < this.generator.midY - 2) || (l4 > this.generator.midY - 1)) {
                        abyte0[k4] = 0;
                      }
                    }
                  }
                  k4--;
                }
              }
            }
            if (flag) {
              break;
            }
          }
        }
      }
    }
  }
  
  protected void a(abv world, int i, int j, int k, int l, byte[] abyte0)
  {
    int i1 = this.b.nextInt(this.b.nextInt(this.b.nextInt(10) + 1) + 1);
    if (this.b.nextInt(5) != 0) {
      i1 = 0;
    }
    for (int j1 = 0; j1 < i1; j1++)
    {
      double d = i * 16 + this.b.nextInt(16);
      double d1 = this.b.nextInt(128);
      double d2 = j * 16 + this.b.nextInt(16);
      int k1 = 1;
      if (this.b.nextInt(4) == 0)
      {
        a(k, l, abyte0, d, d1, d2);
        k1 += this.b.nextInt(4);
      }
      for (int l1 = 0; l1 < k1; l1++)
      {
        float f = this.b.nextFloat() * 3.141593F * 2.0F;
        float f1 = (this.b.nextFloat() - 0.5F) * 2.0F / 8.0F;
        float f2 = this.b.nextFloat() * 2.0F + this.b.nextFloat();
        a(k, l, abyte0, d, d1, d2, f2 * 5.0F, f, f1, 0, 0, 0.5D);
      }
    }
  }
}

